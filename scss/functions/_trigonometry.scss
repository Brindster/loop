// Plain SASS Trigonometry Algorithm in Taylor Expansion

// Based on
//    https://gist.github.com/kamikat/c4d472ce3c61feec6376
//    http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass


$pi: 3.14159265359;
$_precision: 10;
$default-threshold: $pi/180/10;

@function sqrt($r) {
    $x0: 1;
    $x1: $x0;
    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }
    @return $x1;
}

@function pow($base, $exp) {
    $value: $base;
    @if $exp > 1 {
        @for $i from 2 through $exp {
            $value: $value * $base;
        }
    }
    @if $exp < 1{
        @for $i from 0 through -$exp {
            $value: $value / $base;
        }
    }
    @return $value;
}

@function fact($num) {
    $fact: 1;
    @if $num > 0{
        @for $i from 1 through $num {
          $fact: $fact * $i;
        }
    }
    @return $fact;
}

@function _to_unitless_rad($angle) {
    @if unit($angle) == "deg" {
        $angle: $angle / 180deg * $pi;
    }
    @if unit($angle) == "rad" {
        $angle: $angle / 1rad;
    }
    @return $angle;
}

@function sin($angle){
    $a: _to_unitless_rad($angle);
    $sin: $a;
    @for $n from 1 through $_precision {
        $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1));
    }
    @return $sin;
}

@function cos($angle){
    $a: _to_unitless_rad($angle);
    $cos: 1;
    @for $n from 1 through $_precision {
        $cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n);
    }
    @return $cos;
}

@function tan($angle){
    @return sin($angle) / cos($angle);
}

// @function asin($z, $threshold: $default-threshold) {
//     $sum: 0;
//     $complement: false;
//     $sign: $z/abs($z);
//     $z: abs($z);
//
//     @if $z > sin($pi/4) {
//         $complement: true;
//         $z: sqrt(1 - pow($z, 2));
//     }
//
//     $term: $z;
//     $i: 0;
//     $k: 1;
//
//     @while $term > $threshold {
//         $sum: $sum + $term;
//
//         $i: $i + 1;
//         $k: $k*(2*$i - 1)/(2*$i);
//         $j: 2*$i + 1;
//
//         $term: $k*pow($z, $j)/$j;
//     }
//
//     @return $sign * (if($complement, $pi/2 - $sum, $sum));
// }
//
// @function acos($z, $threshold: $default-threshold) {
//     @return $pi/2 - asin($z, $threshold);
// }
//
// @function atan($z, $threshold: $default-threshold) {
//     @return asin($z/sqrt(1 + pow($z, 2)), $threshold);
// }
