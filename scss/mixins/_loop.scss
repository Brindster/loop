/**
 * Loop
 */

@mixin loop($data, $name, $property, $addon:(), $is_important:false) {

    $affix: '-';
    $selector: '.';

    // Make sure to have the correct format or do not generate rules
    // list type
    @if type-of($data) == 'list' {
        // make sure to join same type
        $merged_array: if(type-of($addon) == 'list', join($data, $addon), $data);
        @each $value in $merged_array {
            #{$selector}#{$name}#{$affix}#{$value} {
                #{$property}: if($is_important, #{$value} !important, #{$value});
            }
        }
    // map type
    } @elseif type-of($data) == 'map' {
        // make sure to merge same type
        $merged_data: if(type-of($addon) == 'map', map-merge($data, $addon), $data);
        @each $key, $value in $merged_data {
            #{$selector}#{$name}#{$affix}#{$key} {
                #{$property}: if($is_important, $value !important, $value);
            }
        }
    }
}

/**
 * Loop breakpoints
 */
@mixin loopBreakpoints($breakpoints, $data, $name, $property, $addon:(), $is_important:false) {
    @if type-of($breakpoints) == 'list' and length($breakpoints) > 0 {
        @each $breakpoint in $breakpoints-classes {
            @include breakpoint($breakpoint) {
                @include loop($data, #{$name}\@#{$breakpoint}, $property, $addon, $is_important);
            }
        }
    }
}
