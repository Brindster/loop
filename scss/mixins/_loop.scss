/**
 * Loop
 */

@mixin loopProperties($properties, $value, $is_important) {
    // multiple properties
    @if type-of($properties) == 'list' {
        @each $property in $properties {
            #{$property}: if($is_important, #{$value} !important, #{$value});
        }
    } @else {
        #{$properties}: if($is_important, #{$value} !important, #{$value});
    }
}

/**
 * Loop
 *
 * @param $data         list|map    Data to loop through
 * @param $properties   string|list Property name to use
 * @param $prefix       string      String to prepend to the selector
 * @param $addon        list|map    Extra data to take into consideration
 * @param $is_important bool        Set the !important flag ?
 * @param $suffix       string      String to append to the selector
 */

@mixin loop($data, $properties, $prefix, $addon:(), $is_important:false, $suffix:'') {

    $merge-data: mergeArray($data, $addon);
    $affix: '-';

    // Make sure to have the correct format or do not generate rules
    @if isNotEmpty($merge-data) {
        @if type-of($merge-data) == 'list' {
            @each $value in $merge-data {
                #{$prefix}-#{$value}#{$suffix} {
                    @include loopProperties($properties, $value, $is_important);
                }
            }
        } @elseif type-of($merge-data) == 'map' {
            @each $key, $value in $merge-data {
                $affix: if(isEmpty($key), '', '-');

                #{$prefix}#{$affix}#{$key}#{$suffix} {
                    @include loopProperties($properties, $value, $is_important);
                }

                #{$prefix}#{$affix}#{$key}#{$suffix} {
                    // responsive properties ?
                    @if type-of($value) == 'map' {
                        @each $child-breakpoint, $child-value in $value {
                            @include breakpoint($child-breakpoint) {
                                @include loopProperties($properties, $child-value, $is_important);
                            }
                        }
                    } @else {
                        @include loopProperties($properties, $value, $is_important);
                    }
                }
            }
        }
    }
}


/**
 * Loop breakpoints
 *
 * @param $breakpoints  list        List of breakpoints classes
 * @param $data         list|map    Data to loop through
 * @param $properties   string|list Property name to use
 * @param $prefix       string      String to prepend to the selector
 * @param $addon        list|map    Extra data to take into consideration
 * @param $is_important bool        Set the !important flag ?
 * @param $suffix       string      String to append to the selector
 */
@mixin loopBreakpoints($breakpoints, $data, $properties, $prefix, $addon:(), $is_important:false, $suffix:'') {
    @if isNotEmpty($breakpoints) and isNotEmpty($data) {
        @each $breakpoint in $breakpoints-classes {
            @include breakpoint($breakpoint) {
                $suffixes: #{$suffix}\@#{$breakpoint};
                @include loop($data, $properties, $prefix, $addon, $is_important, $suffixes);
            }
        }
    }
}


/**
 * Loop map keys
 *
 * @param $keys         list        Keys of the map
 * @param $map          map         Map to search in
 * @param $properties   string|list Property name to use
 * @param $prefix       string      String to prepend to the selector
 * @param $is_important bool        Set the !important flag ?
 * @param $suffix       string      String to append to the selector
 */
@mixin loopMapKeys($keys, $map, $properties, $prefix, $is_important:false, $suffix:'')  {
    @if isNotEmpty($keys) {
        $affix: '-';

        @each $key in $keys {
            @if map-has-key($map, $key) {
                $value: map-get($map, $key);
                $selector: #{$prefix}#{$affix}#{$key}#{$suffix};

                #{$selector}{
                    @include loopProperties($properties, $value, $is_important);
                }
            }
        }
    }
}


/**
 * Loop map keys modifiers
 *
 * @param $keys         list        keys of the map
 * @param $map          map         map to search in
 * @param $properties   string|list property name to use
 * @param $is_important bool        set the !important flag ?
 * @param $suffix       string      string to append to the selector
 */
@mixin loopMapKeysModifiers($keys, $map, $properties, $is_important:false, $suffix:'')  {
    @include loopMapKeys($keys, $map, $properties, '&.', $is_important, $suffix);
}
